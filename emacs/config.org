 #+TITLE: Tate's Emacs Configuration
#+AUTHOR: Evan Tate Paterson Hughes
#+DESCRIPTION: Mostly following DT's guide https://www.youtube.com/watch?v=d1fgypEiQkE, but I'm not quite as EVIL
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programmes-to-learn-first][Important programmes to learn first]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#general-keybindings][General Keybindings]]
  - [[#my-keybindings][My Keybindings]]
- [[#a-tale-of-themes-and-fonts][A Tale of Themes and Fonts]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#themes-of-dooommmmmm][Themes... of DOOOMMMMMM]]
  - [[#a-touch-of-transparency][A touch of transparency]]
- [[#buffer-move][Buffer-Move]]
- [[#automatically-create-directories-wtih-c-x-c-f][Automatically create directories wtih C-x C-f]]
- [[#dashboard][Dashboard]]
- [[#gui-tweaks][GUI tweaks]]
  - [[#make-the-gui-cleaner][Make the GUI cleaner]]
  - [[#display-line-numbers-os-gwelwch-yn-dda][Display line numbers, os gwelwch yn dda]]
  - [[#neo-tree-for-easy-file-navigation][Neo-tree for easy file navigation]]
- [[#pretty-meh-batman-villain-ivy][Pretty meh batman villain (Ivy)]]
- [[#languages-tools-etc][Languages, tools, etc]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#haskell][Haskell]]
  - [[#latex][LaTeX]]
  - [[#python][Python]]
  - [[#quarto][Quarto]]
  - [[#scala][Scala]]
  - [[#babel][Babel]]
- [[#make-org-mode-good-actually][Make org-mode good, actually]]
  - [[#table-of-contents][Table of contents]]
  - [[#shootin-bullets][Shootin' Bullets]]
  - [[#disable-that-weird-indentation][Disable that weird indentation]]
  - [[#make-writing-lisp-blocks-easier][Make Writing Lisp blocks easier]]
- [[#no-littering-][No Littering >:|]]
- [[#projectile][Projectile]]
  - [[#look-inot-this-and-learn-about-projects-in-this-sense][Look inot this and learn about projects in this sense]]
- [[#some-neat-tricks][Some neat tricks]]
- [[#shells-and-terminals][Shells and terminals]]
  - [[#eshell][Eshell]]
- [[#sudo-edit-do-you-know-who-i-am][Sudo-Edit; Do you know who I am?]]
- [[#which-key-oh-that-key][Which-Key? Oh, that key]]

* Important programmes to learn first
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
	  ;; Enable :elpaca use-package keyword.
	  (elpaca-use-package-mode)
	  ;; Assume :elpaca t unless otherwise specified.
	  (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)


  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))
#+end_src

** General Keybindings

#+begin_src emacs-lisp

  (use-package general)

#+end_src

** My Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'display-line-numbers-mode)

  (global-set-key (kbd "C-c r") 'reload-init-file)

  (global-set-key (kbd "C-c C-c") 'go-to-config)

  (global-set-key (kbd "C-c <up>") 'buf-move-up)
  (global-set-key (kbd "C-c <down>") 'buf-move-down)
  (global-set-key (kbd "C-c <left>") 'buf-move-left)
  (global-set-key (kbd "C-c <right>") 'buf-move-right)

  (global-set-key (kbd "C-c C-<up>") 'windmove-up)
  (global-set-key (kbd "C-c C-<down>") 'windmove-down)
  (global-set-key (kbd "C-c C-<left>") 'windmove-left)
  (global-set-key (kbd "C-c C-<right>") 'windmove-right)

  (global-set-key (kbd "C-c t") 'org-toggle-item)
  (global-set-key (kbd "C-c d") 'org-todo)

#+end_src

* A Tale of Themes and Fonts
** Setting the font face
#+begin_src emacs-lisp

  (set-face-attribute 'default nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 120
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                       :font "JetBrains Mono"
                       :height 110
                       :weight 'medium)

  ;; For a bit of added spice
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                        :slant 'italic)

  ;; and to make sure client windows open with these fonts
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

#+end_src

** Themes... of DOOOMMMMMM
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** A touch of transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 80))
#+end_src

* Buffer-Move
#+begin_src emacs-lisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))



#+end_src

* Automatically create directories wtih C-x C-f
#+begin_src emacs-lisp
(defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
  "Create parent directory if not exists while visiting file."
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir t)))))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "woah what how did he get here")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "/home/tatephughes/Pictures/wohhowdidhegethere/toby.gif")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* GUI tweaks

** Make the GUI cleaner
#+begin_src emacs-lisp

  ;; In this house, we use shortcuts damnit!!!'

  ;; comment or uncomment as your will decides.
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    ;;(scroll-bar-mode -1)

#+end_src

** Display line numbers, os gwelwch yn dda
#+begin_src emacs-lisp

  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  
#+end_src

** Neo-tree for easy file navigation
#+begin_src emacs-lisp
  (use-package neotree)
  (global-set-key [f8] 'neotree-toggle)

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Pretty meh batman villain (Ivy)
Ivy is a generic completion mechanism for emacs, which comes with 'counsel', a collection of Ivy-enhanced versions of normal emacs commands.
Ivy-rich allows adding descriptions alongside the commands in M-x

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :diminish
    :config
    (ivy-mode))

  ;;(use-package all-the-icons-ivy-rich
    ;;:ensure t
    ;;:init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* Languages, tools, etc

** Company
#+begin_src emacs-lisp
    ;;; package --- Complete Any
    (use-package company
      :defer 2
      :diminish
      :custom
      (company-begin-commands '(self-insert-command))
      (company-begin-idle-delay .1)
      (company-minimum-prefix-length 2)
      (company-show-numbers t)
      (company-tooltip-align-annotations 't)
      (global-company-mode t)
      (setq lsp-completion-provider :capf))

    (use-package company-box
      :after company
      :diminish
      :hook (company-mode . company-box-mode))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src
** LaTeX
#+begin_src emacs-lisp
  (use-package auctex
      :ensure t
      :hook
      (LaTeX-mode . prettify-symbols-mode))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src
** Python
#+begin_src emacs-lisp
  ;;emacs has built-in python support, but i may add some config stuff here later
#+end_src
** Quarto
#+begin_src emacs-lisp
  (use-package quarto-mode
    :mode (("\\.Rmd" . poly-quarto-mode))
    )
  (setq markdown-enable-math t)

#+end_src
** Scala
#+begin_src emacs-lisp
  ;; Enable scala-mode for highlighting, indentation and motion commands
  (use-package scala-mode
    :interpreter ("scala" . scala-mode)
    :mode "\\.s\\(cala\\|bt\\)$"
    :config
    (load-file "~/.config/emacs/lisp/ob-scala.el"))

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
     ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
     (setq sbt:program-options '("-Dsbt.supershell=false")))
#+end_src
** Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

* Make org-mode good, actually
** Table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Shootin' Bullets
#+begin_src emacs-lisp

  ;; Make the different levels indented
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; Use Bullets instead of Aterickses
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Disable that weird indentation
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Make Writing Lisp blocks easier
#+begin_src emacs-lisp
  (require 'org-tempo) ;; now we can write '<s' then press <TAB> for immediate src action!
#+end_src

* No Littering >:|
#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

* Projectile
** TODO Look inot this and learn about projects in this sense
#+begin_src emacs-lispx
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src

* Some neat tricks
#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive) ;; (interactive allows you to call the function with M-x
    (load-file user-init-file)
    (load-file user-init-file)
    (previous-buffer))

  (defun go-to-config ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
#+end_src

* Shells and terminals
Honestly, my terminal solution makes me too happy to move to an emacs shell, but I'll make this placeholder anyway
** Eshell
#+begin_src emacs-lisp

#+end_src

* Sudo-Edit; Do you know who I am?
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

* Which-Key? Oh, that key
#+begin_src emacs-lisp

  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 56
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-lenght 25
          which-key-allow-imprecise-window-fit nil
          which-key-seperator "➢"))

#+end_src

