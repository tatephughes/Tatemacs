#+TITLE: Tate's Emacs Configuration
#+AUTHOR: Evan Tate Paterson Hughes
#+DESCRIPTION: Mostly following DT's guide https://www.youtube.com/watch?v=d1fgypEiQkE, but I'm not quite as EVIL
#+OPTIONS: toc:2


* To-do for the config
*** TODO add more verbose descriptions to all of these things         :org:
*** TODO Rearrange some lines of code for better crash-handling and readability :org:
*** TODO Reorganise Keybindings to use ~General~ and be somewhat more pneumonic :org:
*** TODO Work out Flycheck                                            :org:


* TABLE OF CONTENTS :toc:
- [[#to-do-for-the-config][To-do for the config]]
- [[#elpaca-and-keybindings][Elpaca and Keybindings]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#my-keybindings][My Keybindings]]
  - [[#general-keybindings][General Keybindings]]
  - [[#some-neat-tricks][Some neat tricks]]
- [[#a-tale-of-themes-and-fonts][A Tale of Themes and Fonts]]
  - [[#setting-the-font-face][Setting the font face]]
  - [[#themes-of-dooommmmmm][Themes... of DOOOMMMMMM]]
  - [[#other-aesthetic-changes][Other Aesthetic Changes]]
- [[#agenda][Agenda]]
  - [[#agenda-files][Agenda Files]]
  - [[#custom-agenda][Custom agenda]]
- [[#conveniences][Conveniences]]
  - [[#automatically-create-directories-wtih-c-x-c-f][Automatically create directories wtih C-x C-f]]
  - [[#smarter-parentheses][Smarter Parentheses]]
- [[#dashboard][Dashboard]]
- [[#gui-tweaks][GUI tweaks]]
  - [[#beacon][Beacon]]
  - [[#display-line-numbers-os-gwelwch-yn-dda][Display line numbers, os gwelwch yn dda]]
  - [[#neo-tree-for-easy-file-navigation][Neo-tree for easy file navigation]]
  - [[#mode-line][Mode-line]]
- [[#pamala-isley-ivy][Pamala Isley (Ivy)]]
- [[#languages-tools-etc][Languages, tools, etc]]
  - [[#quarto][Quarto]]
  - [[#latex][LaTeX]]
  - [[#r-and-ess][R and ESS]]
  - [[#scala][Scala]]
  - [[#org-babel][Org-Babel]]
- [[#make-org-mode-good-actually][Make org-mode good, actually]]
  - [[#table-of-contents][Table of contents]]
  - [[#shootin-bullets][Shootin' Bullets]]
  - [[#disable-that-weird-indentation][Disable that weird indentation]]
  - [[#make-writing-lisp-blocks-easier][Make Writing Lisp blocks easier]]
  - [[#settings-tweaks][Settings Tweaks]]
  - [[#other-latex-tweaks][Other LaTeX tweaks]]
  - [[#auto-export-to-org][Auto Export to org]]
- [[#no-littering-][No Littering >:|]]
- [[#projectile][Projectile]]
  - [[#look-inot-this-and-learn-about-projects-in-this-sense][Look inot this and learn about projects in this sense]]
- [[#shells-and-terminals][Shells and terminals]]
  - [[#eshell][Eshell]]
- [[#sublimity][Sublimity]]
- [[#sudo-edit-do-you-know-who-i-am][Sudo-Edit; Do you know who I am?]]
- [[#which-key-oh-that-key][Which-Key? Oh, that key]]

* Elpaca and Keybindings

** Elpaca Package Manager

Using the elpaca file manager. has some nice stuff like async. Since I'm very unlikely to touch this code (it's basically ripped from their github), I may move this block elsewhere.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
          ;; Enable :elpaca use-package keyword.
          (elpaca-use-package-mode)
          ;; Assume :elpaca t unless otherwise specified.
          (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  (use-package general :demand t)
  (elpaca-wait)


  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))

  (add-to-list 'load-path "~/.config/emacs/lisp/")
#+end_src

** My Keybindings

Custom keybinds. As the to-do list suggests, I should get into ~General~, setting a overall header to something unique like ~C-<space>~ then using a bunch of pneumonic commands, for a sort of 'vim-emacs' mashup. ~C-<space>~ is currently bound to some marking feature though.

#+begin_src emacs-lisp
  ;; Display the line numbers at the side of the window
  (global-set-key (kbd "C-c l") 'display-line-numbers-mode)

  ;; Quickly reload this file after making edits. Refers to a function defined under the tab 'neat-tricks'
  (global-set-key (kbd "C-c r") 'reload-init-file)

  ;; Quickly get to this file
  (global-set-key (kbd "C-c C-<return>") 'go-to-config)

  ;; Rearrange the buffers
  (global-set-key (kbd "C-M-<up>") 'buf-move-up)
  (global-set-key (kbd "C-M-<down>") 'buf-move-down)
  (global-set-key (kbd "C-M-<left>") 'buf-move-left)
  (global-set-key (kbd "C-M-<right>") 'buf-move-right)

  ;; Move focus
  (global-set-key (kbd "C-<up>") 'windmove-up)
  (global-set-key (kbd "C-<down>") 'windmove-down)
  (global-set-key (kbd "C-<left>") 'windmove-left)
  (global-set-key (kbd "C-<right>") 'windmove-right)

  ;; Todo
  (global-set-key (kbd "C-c t") 'org-toggle-item)
  (global-set-key (kbd "C-c d") 'org-todo)

  ;; Return to dashboard
  (global-set-key (kbd "C-c <return>") 'dashboard-open)

  ;; Org-Agenda Shortcut
  (global-set-key (kbd "C-c o") 'org-agenda)

#+end_src

** General Keybindings

#+begin_src emacs-nope
    (require 'general)

    (global-unset-key (kbd "C-c"))
    (global-unset-key (kbd "C-x"))
    (global-unset-key (kbd "C-v"))
    (global-unset-key (kbd "C-SPC"))
    (global-set-key (kbd "C-c") nil)

    (general-create-definer my-leader-def
      ;; :prefix my-leader
      ;; or without a variable
      :prefix "C-SPC")


    (my-leader-def
      "a" 'org-agenda
      "b" 'counsel-bookmark
      "c" 'org-capture
      "s" 'save-buffer
      "r c" 'reload-init-file
      "t l" 'display-line-numbers-mode
      "g c" 'go-to-config
      "g d" 'go-to-dashboard
      "g f" 'find-file
  )



    (general-define-key
     "C-c" 'kill-ring-save
     "C-x" 'kill-region
     "C-v" 'yank
     "C-h" 'backward-char
     "C-j" 'next-line
     "C-k" 'previous-line
     "C-l" 'forward-char
     "C-<up>" 'windmove-up
     "C-<down>" 'windmove-down
     "C-<left>" 'windmove-left
     "C-<right>" 'windmove-right)
#+end_src
** Some neat tricks

Here we actually define the functions references in the above keybindings
*** Reload Init
#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive) ;; (interactive allows you to call the function with M-x
    (load-file user-init-file)
    (load-file user-init-file)
    (previous-buffer))
#+end_src

*** Go to config
#+begin_src emacs-lisp
  (defun go-to-config ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
#+end_src
*** Buffer-Move
Can't actually remember where i got this code oops

#+begin_src emacs-lisp
  (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))
#+end_src
* A Tale of Themes and Fonts

** Setting the font face

Self-explanatory. Plan to mess around with new fonts periodically. Go [[https://github.com/ryanoasis/nerd-fonts][here]] to download the nerd fonts (which play nicely with org-bullets and stuff)
#+begin_src emacs-lisp

  ;; Make sure everything is utf-8

  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)

  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))


  ;; Actually set the fonts
  (set-face-attribute 'default nil
                      :font "ProggyCleanNerdFont"
                      :height 165
                      :weight 'medium)

  (set-face-attribute 'variable-pitch nil
                      :font "Ubuntu"
                      :height 180
                      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
                       :font "JetBrains Mono"
                       :height 165
                       :weight 'medium)

  ;; For a bit of added spice (seems broken with ProggyClean)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                        :slant 'italic)

  ;; and to make sure client windows open with these fonts
  (add-to-list 'default-frame-alist '(font . "ProggyCleanNerdFont"))

#+end_src

** Themes... of DOOOMMMMMM

The package [[https://github.com/doomemacs/themes][doom-themes]] provides some nice themes, including the dracula theme I've been loving.
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-dracula t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
** Other Aesthetic Changes

Miscellaneous aesthetic changes
#+begin_src emacs-lisp

  ;; In this house, we use shortcuts damnit!!!'

  ;; Get rid of pesky GUI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq default-frame-alist '((undecorated . t)))

  ;; Some nice transparency
  (add-to-list 'default-frame-alist '(alpha-background . 95))

  ;; Make the modeline pretty
  (use-package solaire-mode
    :config (solaire-global-mode))

  ;; not sure where to put this lol
  (delete-selection-mode 1)

  ;; Margin Adjust
  (setq left-margin-width 3)
  (setq right-margin-width 3)

#+end_src

* Agenda

get your life organised, nerd

** Agenda Files

Seems like this variable likes to change itself, don't be afraid to ~C-h v org-agenda-files~ to check it and delete everything if need be, the below code will add in the necessary files.

#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/MyProjects/Notes/APTS" "~/MyProjects/Notes/APTS/StatsComputation" "~/MyProjects/Notes/APTS/StatsInference" "~/orgfiles"))
#+end_src

** Custom agenda

Custom agenda view; so far it's just one for all my PhD tasks

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("v" "PhD Tasks"
           ((tags "general"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "General Statistics Tasks")))
            (tags "APTS"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks from the Warwick APTS Course")))
            (tags "org"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks relating to org and the config file")))
            (tags "reading"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks relating to the reading list")))
            (agenda "")
            (alltodo "")))))
#+end_src

* Conveniences

** Automatically create directories wtih C-x C-f

What it says on the tin
#+begin_src emacs-lisp
(defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
  "Create parent directory if not exists while visiting file."
  (unless (file-exists-p filename)
    (let ((dir (file-name-directory filename)))
      (unless (file-exists-p dir)
        (make-directory dir t)))))
#+end_src
** Smarter Parentheses

*** TODO Get this to /actually/ work
#+begin_src emacs-lisp
#+end_src
* Dashboard

The nice dashboard. wait whats that fluffy white thing
#+begin_src emacs-lisp
  (use-package nerd-icons)

  (use-package dashboard
      :ensure t 
      :init
      (setq initial-buffer-choice 'dashboard-open)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-banner-logo-title "woah what how did he get here")
      ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
      (setq dashboard-startup-banner "/home/tate/Tatemacs/wohhowdidhegethere/toby.gif")  ;; use custom image as banner
      (setq dashboard-center-content nil) ;; set to 't' for centered content
      (setq dashboard-items '((recents . 50)
                              (bookmarks . 10)))
      :custom
      (dashboard-modify-heading-icons '((recents . "file-text")
                                        ))
      :config
      (dashboard-setup-startup-hook)
      )

  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
  (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
#+end_src

* GUI tweaks
** Beacon

Make the cursor glowwww

#+begin_src emacs-lisp
    (use-package beacon
      :ensure t
      :config (beacon-mode))
#+end_src
** Display line numbers, os gwelwch yn dda

Makes displaying line numbers the deafult. Toggle this with ~C-c l~ as defined under 'Keybindings'.



#+begin_src emacs-lisp

  (global-display-line-numbers-mode 0)
  (global-visual-line-mode t)
  
#+end_src

*** TODO Make this a hook to only enable in programming modes and not org-mode

** Neo-tree for easy file navigation

A nice file navigator for bigger 

#+begin_src emacs-lisp
  (use-package neotree)
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-window-width 50)

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Mode-line
#+begin_src emacs-lisp
    ;; clean up the mode-line
    (use-package diminish)

    (use-package smart-mode-line
      :config (sml/setup))

    (use-package mode-icons
      :config (mode-icons-mode))
#+end_src
* Pamala Isley (Ivy)
Ivy is a generic completion mechanism for emacs, which comes with 'counsel', a collection of Ivy-enhanced versions of normal emacs commands.
Ivy-rich allows adding descriptions alongside the commands in M-x

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :diminish
    :config
    (ivy-mode))

  ;;(use-package all-the-icons-ivy-rich
    ;;:ensure t
    ;;:init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1)
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src

* Languages, tools, etc
** Quarto
#+begin_src emacs-lisp
  (use-package quarto-mode
    :mode (("\\.Rmd" . poly-quarto-mode))
    )
  (setq markdown-enable-math t)
#+end_src
** LaTeX
#+begin_src emacs-lisp
  (use-package auctex
  :defer t
  :ensure t)
  (setq org-highlight-latex-and-related '(native))

  (use-package cdlatex)
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
  (add-hook 'latex-mode-hook 'turn-on-cdlatex)
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)

  ;; Line below currently breaks things
  ;; (add-hook 'after-save-hook #'org-latex-export-to-pdf)
#+end_src
** R and ESS
#+begin_src emacs-lisp
  (use-package ess)
#+end_src
** Scala

#+begin_src emacs-lisp
  (require 'package)

  ;; Add melpa to your packages repositories
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (package-initialize)

  ;; Install use-package if not already installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)

  ;; Enable defer and ensure by default for use-package Keep
  ;; auto-save/backup files separate from source code:
  ;; https://github.com/scalameta/metals/issues/1027
  (setq use-package-always-defer t
        use-package-always-ensure t
        backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;; Enable scala-mode for highlighting, indentation and motion commands
  (use-package scala-mode
    :interpreter ("scala" . scala-mode))

  ;; Enable sbt mode for executing sbt commands
  (use-package sbt-mode
    :commands sbt-start sbt-command
    :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map)
     ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
     (setq sbt:program-options '("-Dsbt.supershell=false")))

  ;; Enable nice rendering of diagnostics like compile errors.
  (use-package flycheck
    :diminish
    :init (global-flycheck-mode))

  (use-package lsp-mode
    :diminish
    ;; Optional - enable lsp-mode automatically in scala files
    ;; You could also swap out lsp for lsp-deffered in order to defer loading
    :hook  (scala-mode . lsp)
           (lsp-mode . lsp-lens-mode)
    :config
    ;; Uncomment following section if you would like to tune lsp-mode performance according to
    ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
    ;; (setq gc-cons-threshold 100000000) ;; 100mb
    ;; (setq read-process-output-max (* 1024 1024)) ;; 1mb
    ;; (setq lsp-idle-delay 0.500)
    ;; (setq lsp-log-io nil)
    ;; (setq lsp-completion-provider :capf)
    (setq lsp-prefer-flymake nil)
    ;; Makes LSP shutdown the metals server when all buffers in the project are closed.
    ;; https://emacs-lsp.github.io/lsp-mode/page/settings/mode/#lsp-keep-workspace-alive
    (setq lsp-keep-workspace-alive nil))

  ;; Add metals backend for lsp-mode
  (use-package lsp-metals)

  ;; Enable nice rendering of documentation on hover
  ;;   Warning: on some systems this package can reduce your emacs responsiveness significally.
  ;;   (See: https://emacs-lsp.github.io/lsp-mode/page/performance/)
  ;;   In that case you have to not only disable this but also remove from the packages since
  ;;   lsp-mode can activate it automatically.
  (use-package lsp-ui)

  ;; lsp-mode supports snippets, but in order for them to work you need to use yasnippet
  ;; If you don't want to use snippets set lsp-enable-snippet to nil in your lsp-mode settings
  ;; to avoid odd behavior with snippets and indentation
  (use-package yasnippet)
  (use-package ivy-yasnippet
    :hook (yas-minor-mode . ivy-yasnippet))

  ;; Use company-capf as a completion provider.
  ;;
  ;; To Company-lsp users:
  ;;   Company-lsp is no longer maintained and has been removed from MELPA.
  ;;   Please migrate to company-capf.
  (use-package company
    :diminish
    :hook (scala-mode . company-mode)
    :config
    (setq lsp-completion-provider :capf))

  ;; Posframe is a pop-up tool that must be manually installed for dap-mode
  (use-package posframe)

  ;; Use the Debug Adapter Protocol for running tests and debugging
  (use-package dap-mode
    :hook
    (lsp-mode . dap-mode)
    (lsp-mode . dap-ui-mode))


#+end_src

** Org-Babel
#+begin_src emacs-lisp
      (org-babel-do-load-languages
      'org-babel-load-languages
      '(
	(R . t)
	(latex . t)
    ))

    ;; disable the confirmation message
    (setq org-confirm-babel-evaluate nil)
#+end_src

* Make org-mode good, actually
** Table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Shootin' Bullets
#+begin_src emacs-lisp

  ;; Make the different levels indented
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; Use Bullets instead of Aterickses
  ;;(use-package org-bullets)
  ;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Disable that weird indentation
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Make Writing Lisp blocks easier
#+begin_src emacs-lisp
  (require 'org-tempo) ;; now we can write '<s' then press <TAB> for immediate src action!
#+end_src
** Settings Tweaks
#+begin_src emacs-lisp
  (setq org-image-actual-width 500) ;; Sets the width of image previewq in org-mode

  ;; Sets the size of LaTeX previews 
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 0.9))
#+end_src
*** TODO Make a keybinding to quickly set the size of latex previews :config:
** Other LaTeX tweaks
#+begin_src emacs-lisp
  (use-package org-fragtog)
  (add-hook 'org-mode-hook 'org-fragtog-mode)

  (use-package math-preview
    :load-path "/home/tate/.asdf/plugins/math-preview"
    :custom (math-preview-command "/home/tate/.asdf/plugins/math-preview/math-preview.js"))

  (setq org-preview-latex-image-directory ".ltximg/")
#+end_src
** Auto Export to org
#+begin_src emacs-lisp
  (use-package ox-pandoc)
  (use-package auto-org-md)
#+end_src
* No Littering >:|
#+begin_src emacs-lisp

(use-package no-littering)

#+end_src
* Projectile
** TODO Look inot this and learn about projects in this sense
#+begin_src emacs-lispx
  (use-package projectile
    :config
    (projectile-mode 1))
#+end_src

* Shells and terminals
Honestly, my terminal solution makes me too happy to move to an emacs shell, but I'll make this placeholder anyway
** Eshell
#+begin_src emacs-lisp

#+end_src

* Sublimity
Smooth-scrolling and a scrolling minimap (which doesn't seem to work)
#+begin_src emacs-lisp
    (use-package sublimity
      :config (sublimity-mode))
#+end_src

* Sudo-Edit; Do you know who I am?
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

* Which-Key? Oh, that key
#+begin_src emacs-lisp

  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 56
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-lenght 25
          which-key-allow-imprecise-window-fit nil
          which-key-seperator "➢"))

#+end_src



FFS LOAD THE AGENDA FILES

#+begin_src emacs-lisp

(setq org-agenda-file-menu-enabled t)

(setq org-agenda-files
        '("~/MyProjects/Notes/APTS" "~/MyProjects/Notes/APTS/StatsComputation" "~/MyProjects/Notes/APTS/StatsInference" "~/orgfiles"))

#+end_src
